[alias]
    # View abbreviated SHA, description and history graphy of the latest 20 commits
    l = log --pretty=oneline -n 20 --graph --abbrev-commit --decorate

    ll = log --pretty=format:\"%C(yellow)%h%Cred %ad %Cgreen|%Creset %s%d %Cblue[%an]\" --graph --date=format:\"%Y-%m-%d\" -n 20

    lll = log --pretty=format:\"%C(yellow)%h%Cred %ad %Cgreen|%Creset %s%d %Cblue[%an]%n%b\" --graph --date=format:\"%Y-%m-%d %H:%M\" -n 20

    # View the current working tree status using the short format
    s = status -s -uall

    # Branch
    b = branch

    # Branch name
    bn = rev-parse --abbrev-ref HEAD

    # Show the diff between the latest commit and the current state
    d = !"clear; git diff"

    # Commit
    c = commit --verbose

    # Commit amend
    ca = commit --verbose --amend

    # Checkout
    ch = checkout

    # Add (verbose mode to show added files)
    a = add -v

    # Add all modified files in working tree (verbose mode)
    aa = add -v -u

    # Shortcut for push
    p = push

    # Shortcut for push --force
    pf = push --force

    # Shortcut for push --force-with-lease
    pfl = push --force-with-lease

    # Default push origin master
    pom = push origin master

    # Default push origin develop
    pod = push origin develop

    # Push current branch
    pcb = !sh -c 'git push -u origin $(git rev-parse --abbrev-ref HEAD)'

    # Push specific tag
    pt = push origin

    # Push all tags
    pat = push origin --tags

    # Shortcut for pull
    pl = pull --rebase --prune

    # Shortcut to stash changes, pull, then pop from stash
    pls = !"git stash && git pull --rebase --prune && git stash pop"

    # Default pull origin master
    plom = pull --rebase --prune origin master

    # Default pull origin develop
    plod = pull --rebase --prune origin develop

    # Checkout MRs
    mr = !sh -c 'git fetch origin merge-requests/$1/head:mr-origin-$1 && git checkout mr-origin-$1' -

    # Use fzf to help delete multiple branches
    db = !"git branch -D $(git branch | fzf -m)"

    # Use fzf to help delete multiple tags
    dt = !"git tag -d $(git tags | fzf -m)"

    # Un-commit last commit
    undo = reset --soft HEAD~1

    # Check out PR to local branch - useful for PRs from forks
    co-pr = !sh -c 'git fetch origin pull/$1/head:pr/$1 && git checkout pr/$1' -

    # Shortcut to rewrite history of current branch
    # Finds commit that the current branch shares with master,
    # then triggers an interactive rebase
    rewrite-branch = !sh -c 'git rebase -i $(git merge-base ${1:-master} $(git rev-parse --abbrev-ref HEAD))'

    # Shortcut to checkout main branch, pull latest changes, re-checkout branch,
    # rebase on top of main branch
    remain = !sh -c 'git stash && git checkout ${1:-master} && git pull --rebase && git checkout - && git rebase ${1:-master} && git stash pop'

    # Checkout a new branch starting with cr/
    pb = "!f() { git checkout -b cr/${1:-tmp}; }; f"

    # Use fzf to checkout (reset) multiple files
    fch = !sh -c 'git checkout $(git status -s -uno | cut -d\" \" -f3 | fzf -m)'

    # Show verbose output about tags, branches, or remotes
    tags = tag -l
    branches = branch -a
    remotes = remote -v
[core]
    # Make git rebase safe on osx
    # See http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/
    trustctime = false
    excludesfile = ~/.gitignore_global
    pager = delta --syntax-theme=\"Monokai Extended Origin\"
[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red
    new = green
[color "status"]
    added = green
    changed = yellow
    untracked = cyan
[filter "lfs"]
    clean = git-lfs clean -- %f
    smudge = git-lfs smudge -- %f
    required = true
    process = git-lfs filter-process
[init]
    defaultBranch = "main"
[merge]
    tool = p4merge
[mergetool]
    keepTemporaries = false
    prompt = false
[user]
    useconfigonly = true
[color "diff-highlight"]
    oldNormal = red
    oldHighlight = red bold 52
    newNormal = green
    newHighlight = green bold 22
[pull]
    rebase = true
[push]
	default = current
	autoSetupRemote = true
[rebase]
	updateRefs = true
  autoStash = true
[commit]
	verbose = true
[includeif "gitdir:~/github/"]
	path = ~/github/.gitconfig
